#!/usr/bin/env ruby

# A ruby script which prints a MySQL schema to add zones to a new UPS database
#
# Usage, to add the zones to a ups mysql database named 'ups_db':
#   bin/create-zones-schema | mysql -u ups_user -p ups_db

# See bottom for actual zone data

class Zone
  attr_accessor :name, :percent # String name, Integer percent 1-100%

  def initialize name, percent
    @name = name
    @percent = percent
  end
  
  def each_day
    return unless block_given?
    @days.each do |pair|
      yield pair[0],pair[1] # yield day_name,points
    end
  end
  
  def add_day day_name, points
    @days ||= []
    @days << [day_name,points]
    nil
  end

  def num_days
    @days.size
  end
end

def zones_sql zone
  "INSERT INTO zones (name,percent,num_days) VALUES ('#{zone.name}',#{zone.percent},#{zone.num_days});"
end

def zone_points_sql zone
  table_name = "zone_points_#{zone.name}"
  table = """
CREATE TABLE #{table_name} (
  id int(11) NOT NULL auto_increment,
  day_name char(20) default NULL,
  points int(11) default NULL,
  PRIMARY KEY  (id)
);
"""
  day_points = ""

  zone.each_day do |day_name,points|
    day_points += "INSERT INTO #{table_name} (day_name,points) VALUES ('#{day_name}',#{points});\n"
  end
  table + day_points
end

def sql zone
  zone_points_sql(zone) + zones_sql(zone)
end

################################
# 'Hours System' assign zone points based on # of hours it takes with one full formation

POINTS_PER_HOUR = 504000 # 5040 chosen as a highly divisible number for when splitting points among runners

DEFAULT_PERCENT = 10

def points hours
  (POINTS_PER_HOUR * hours).to_i
end

def simple_zone name, hours
  z = Zone.new name, DEFAULT_PERCENT
  z.add_day name, points(hours)
  z
end

################################
# Zone Data - Change As Needed

ZONES = []

ZONES << simple_zone("alps",1)
ZONES << simple_zone("kalata",0.75)
ZONES << simple_zone("lyryanoth",0.75)
ZONES << simple_zone("coliseum",0.75)
ZONES << simple_zone("condemned",0.75)
ZONES << simple_zone("eldricks",0.5)
ZONES << simple_zone("verigaard",0.75)
ZONES << simple_zone("den",0.5)
ZONES << simple_zone("reclasta",0.75)
ZONES << simple_zone("sevoseth",1)
ZONES << simple_zone("dlujik",0.5)
ZONES << simple_zone("pallens",0.5)

ZONES << begin
           undead = Zone.new 'undeadforest', DEFAULT_PERCENT
           undead.add_day 'full run', points(1)
           undead.add_day '(removed feral only)', points(0)
           undead
         end

ZONES << begin
           vond = Zone.new 'vondarkla', DEFAULT_PERCENT
           vond.add_day 'full run', points(0.75)
           vond.add_day 'tufts only', points(0)
           vond
         end

ZONES << begin
           estate = Zone.new 'estate', DEFAULT_PERCENT
           estate.add_day 'all but count/nem', points(0.5)
           estate.add_day 'only nemesis', points(0.17)
           estate.add_day 'all but nemesis', points(0.75)
           estate.add_day 'all but count', points(0.67)
           estate.add_day 'entire zone', points(0.92)
           estate
         end

ZONES << begin
           ely = Zone.new 'elysium', DEFAULT_PERCENT
           ely.add_day 'day 1', points(1.5)
           ely.add_day 'day 2', points(1.5)
           ely
         end

ZONES << begin
           tomb = Zone.new 'tomb', DEFAULT_PERCENT
           tomb.add_day 'day 1', points(0.4166)
           tomb.add_day 'bronze', points(1)
           tomb.add_day 'silver', points(1)
           tomb.add_day 'gold', points(1)
           tomb
         end

ZONES << begin
           df = Zone.new 'demonforge', DEFAULT_PERCENT
           df.add_day 'kanch only', points(0.25)
           df.add_day 'all but dhaul', points(1)
           df.add_day 'full with dhaul', points(1.33)
           df.add_day 'only dhaul', points(0.33)
           df
         end

ZONES << begin
           stone = Zone.new 'bloodstone', DEFAULT_PERCENT
           stone.add_day 'day 1', points(0.75)
           stone.add_day 'day 2', points(1)
           stone.add_day 'day 3', points(0.75)
           stone.add_day 'day 4', points(1.5)
           stone.add_day 'lloth', points(0.3)
           stone.add_day 'death knight', points(0.4)
           stone.add_day 'glabrezu', points(0.4)
           stone.add_day '(drolem removed)', points(0)
           stone
         end

ZONES << begin
           thg = Zone.new 'thg', DEFAULT_PERCENT
           thg.add_day 'full run', points(4.5)
           thg.add_day 'thg up to MD', points(0.675)
           thg.add_day 'thg up to rosco', points(1.35)
           thg.add_day 'thg up to tma', points(1.8)
           thg.add_day 'thg up to niram', points(2.25)
           thg
         end

##################################
# Print zones sql

ZONES.each do |zone| puts sql zone end if __FILE__ == $0
